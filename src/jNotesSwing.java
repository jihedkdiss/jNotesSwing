
import java.awt.Toolkit;
import java.awt.geom.RoundRectangle2D;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.io.*;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;

/**
 *
 * @author Jihed
 */
public class jNotesSwing extends javax.swing.JFrame {

    DefaultTableModel Notes = new DefaultTableModel();

    /**
     * Creates new form Tasks
     */
    public jNotesSwing() {
        setLayout(null);
        setUndecorated(true);
        setShape(new RoundRectangle2D.Double(0, 0, 480, 480, 25, 25));
        this.setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("icon.png")));
        initComponents();
        System.out.println("Coded by Jihed Kdiss (@jihedkdiss)");
        Notes.addColumn("");
        notes.setModel(Notes);
        for (int i = 0; i < 5; i++) {
            String note = "  Note " + i;
            Object ary[] = {note};
            Notes.addRow(ary);
        }
        updateRemainingTasks();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        add = new javax.swing.JLabel();
        remove = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        clear = new javax.swing.JLabel();
        exit = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        notes = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        exportBtn = new javax.swing.JButton();
        importBtn = new javax.swing.JButton();
        remainingTasks = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("jNotes by Jihed Kdiss");
        setLocation(new java.awt.Point(0, 0));
        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                formMouseDragged(evt);
            }
        });
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
        });

        add.setFont(new java.awt.Font("Segoe MDL2 Assets", 0, 15)); // NOI18N
        add.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        add.setText("");
        add.setToolTipText("Add Note");
        add.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addMouseClicked(evt);
            }
        });

        remove.setFont(new java.awt.Font("Segoe MDL2 Assets", 0, 15)); // NOI18N
        remove.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        remove.setText("");
        remove.setToolTipText("Delete Note");
        remove.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                removeMouseClicked(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Montserrat", 0, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("jNotes by Jihed Kdiss");

        clear.setFont(new java.awt.Font("Segoe MDL2 Assets", 0, 15)); // NOI18N
        clear.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        clear.setText("");
        clear.setToolTipText("Clear Notes");
        clear.setName(""); // NOI18N
        clear.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                clearMouseClicked(evt);
            }
        });

        exit.setFont(new java.awt.Font("Segoe MDL2 Assets", 0, 15)); // NOI18N
        exit.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        exit.setText("");
        exit.setToolTipText("Close");
        exit.setName(""); // NOI18N
        exit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                exitMouseClicked(evt);
            }
        });

        notes.setAutoCreateRowSorter(true);
        notes.setFont(new java.awt.Font("Montserrat", 0, 14)); // NOI18N
        notes.setToolTipText("Coded by Jihed Kdiss (@jihedkdiss)");
        notes.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        notes.setIntercellSpacing(new java.awt.Dimension(5, 5));
        notes.setRowHeight(25);
        notes.setShowVerticalLines(false);
        notes.getTableHeader().setResizingAllowed(false);
        notes.getTableHeader().setReorderingAllowed(false);
        notes.setUpdateSelectionOnSort(false);
        notes.setVerifyInputWhenFocusTarget(false);
        jScrollPane1.setViewportView(notes);

        jLabel2.setFont(new java.awt.Font("Montserrat", 0, 12)); // NOI18N
        jLabel2.setText("Version 1.2");

        exportBtn.setText("Export");
        exportBtn.setToolTipText("");
        exportBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportBtnActionPerformed(evt);
            }
        });

        importBtn.setText("Import");
        importBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importBtnActionPerformed(evt);
            }
        });

        remainingTasks.setFont(new java.awt.Font("Montserrat", 1, 14)); // NOI18N
        remainingTasks.setText("No tasks remaining");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 460, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(add, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(remove, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(clear, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(exit, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(exportBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(importBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(remainingTasks)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel2)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(add, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(remove, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(exit, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(clear, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 403, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(exportBtn)
                    .addComponent(importBtn)
                    .addComponent(remainingTasks))
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void updateRemainingTasks() {
        if (notes.getRowCount() != 0) {
            remainingTasks.setText(notes.getRowCount() + " tasks remaining");
        } else {
            remainingTasks.setText("No tasks remaining");
        }
    }

    private void exitMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exitMouseClicked
        System.exit(0);
    }//GEN-LAST:event_exitMouseClicked

    private void addMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addMouseClicked
        String NewTask = "  " + JOptionPane.showInputDialog(null, "Enter your task", "New Task", 1);
        Object ary[] = {NewTask};
        Notes.addRow(ary);
        updateRemainingTasks();
    }//GEN-LAST:event_addMouseClicked

    private void clearMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_clearMouseClicked
        while (Notes.getRowCount() != 0) {
            Notes.removeRow(0);
        }
        updateRemainingTasks();
    }//GEN-LAST:event_clearMouseClicked

    private void removeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_removeMouseClicked
        Notes.removeRow(notes.getSelectedRow());
        updateRemainingTasks();
    }//GEN-LAST:event_removeMouseClicked

    private void exportBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportBtnActionPerformed
        /*System.out.println("Export button pressed");
        String location = JOptionPane.showInputDialog(null, "Enter export location", "Export", 1);
        PrintStream out;
        try {
            out = new PrintStream(new FileOutputStream(location));
            for (int i = 0; i < notes.getRowCount(); i++) {
                String note = notes.getModel().getValueAt(i, 0) + "";
                out.println(note);
            }
        } catch (Exception e) {
            System.out.println("  [!] " + e);
        }*/
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setCurrentDirectory(new File("C:\\"));
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        Integer opt = fileChooser.showSaveDialog(this);
        File location = null;
        if (opt == JFileChooser.APPROVE_OPTION) {
            location = fileChooser.getSelectedFile();
        }
        PrintStream out;
        try {
            out = new PrintStream(new FileOutputStream(location));
            for (int i = 0; i < notes.getRowCount(); i++) {
                String note = notes.getModel().getValueAt(i, 0) + "";
                out.println(note);
            }
        } catch (Exception e) {
            System.out.println("  [!] " + e);
        }
        JOptionPane.showMessageDialog(null, "Notes exported successfully!", "jNotes | Export notes", 1);
        updateRemainingTasks();
    }//GEN-LAST:event_exportBtnActionPerformed

    private void importBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importBtnActionPerformed
        /*try {
            System.out.println("Import button pressed");
            String location = JOptionPane.showInputDialog(null, "Enter import location", "Export", 1);
            File importFile = new File(location);
            Scanner importScanner = new Scanner(importFile);
            while (Notes.getRowCount() != 0) {
                Notes.removeRow(0);
            }
            int line = 0;
            while (importScanner.hasNextLine()) {
                String NewTask = importScanner.nextLine();
                Object ary[] = {NewTask};
                Notes.addRow(ary);
                line++;
            }
            JOptionPane.showMessageDialog(null, "Notes exported successfully", "Export", 1);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(jNotesSwing.class.getName()).log(Level.SEVERE, null, ex);
        }*/
        try {
            JFileChooser fileChooser = new JFileChooser();
            fileChooser.setCurrentDirectory(new File("C:\\"));
            fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
            Integer opt = fileChooser.showOpenDialog(this);
            File importFile = null;
            if (opt == JFileChooser.APPROVE_OPTION) {
                importFile = fileChooser.getSelectedFile();
            }
            Scanner importScanner;
            importScanner = new Scanner(importFile);
            while (Notes.getRowCount() != 0) {
                Notes.removeRow(0);
            }
            int line = 0;
            while (importScanner.hasNextLine()) {
                String NewTask = importScanner.nextLine();
                Object ary[] = {NewTask};
                Notes.addRow(ary);
                line++;
            }
            JOptionPane.showMessageDialog(null, "Notes imported successfully!", "jNotes | Import notes", 1);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(jNotesSwing.class.getName()).log(Level.SEVERE, null, ex);
        }
        updateRemainingTasks();
    }//GEN-LAST:event_importBtnActionPerformed

    int xx, xy;
    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
        xx = evt.getX();
        xy = evt.getY();
    }//GEN-LAST:event_formMousePressed

    private void formMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseDragged
        int x = evt.getXOnScreen();
        int y = evt.getYOnScreen();
        this.setLocation(x - xx, y - xy);
    }//GEN-LAST:event_formMouseDragged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(jNotesSwing.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(jNotesSwing.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(jNotesSwing.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(jNotesSwing.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new jNotesSwing().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel add;
    private javax.swing.JLabel clear;
    private javax.swing.JLabel exit;
    private javax.swing.JButton exportBtn;
    private javax.swing.JButton importBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable notes;
    private javax.swing.JLabel remainingTasks;
    private javax.swing.JLabel remove;
    // End of variables declaration//GEN-END:variables
}
